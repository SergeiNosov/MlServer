// This file was auto-generated by ML.NET Model Builder. 
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Microsoft.ML;
using Microsoft.ML.Data;
using Microsoft.ML.Trainers;

namespace SentimentModel.ConsoleApp
{
    public partial class SentimentModel
    {
        public static ITransformer RetrainPipeline(MLContext context, IDataView trainData)
        {
            var pipeline = BuildPipeline(context);
            var model = pipeline.Fit(trainData);

            return model;
        }

        /// <summary>
        /// build the pipeline that is used from model builder. Use this function to retrain model.
        /// </summary>
        /// <param name="mlContext"></param>
        /// <returns></returns>
        public static IEstimator<ITransformer> BuildPipeline(MLContext mlContext)
        {
            // Data process configuration with pipeline data transformations
            var pipeline = mlContext.Transforms.Categorical.OneHotEncoding(@"LoggedIn", @"LoggedIn")      
                                    .Append(mlContext.Transforms.Text.FeaturizeText(inputColumnName:@"SentimentText",outputColumnName:@"SentimentText"))      
                                    .Append(mlContext.Transforms.Concatenate(@"Features", new []{@"LoggedIn",@"SentimentText"}))      
                                    .Append(mlContext.Transforms.NormalizeMinMax(@"Features", @"Features"))      
                                    .Append(mlContext.Regression.Trainers.Sdca(new SdcaRegressionTrainer.Options(){L1Regularization=1F,L2Regularization=0.1F,LabelColumnName=@"Sentiment",FeatureColumnName=@"Features"}));

            return pipeline;
        }
    }
}
